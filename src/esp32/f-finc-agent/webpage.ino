const char index_html[] PROGMEM = R"rawliteral(<!DOCTYPE html><html lang="en"><head><meta charset="UTF-8" /><meta name="viewport" content="width=device-width, initial-scale=1.0" /><title>F-FINC Agent</title><style> :root { --primary-color: #2563eb; --primary-light: #60a5fa; --primary-dark: #1d4ed8; --secondary-color: #6366f1; --secondary-light: #818cf8; --secondary-dark: #4f46e5; --success-color: #10b981; --success-light: #34d399; --danger-color: #ef4444; --danger-light: #f87171; --warning-color: #f59e0b; --warning-light: #fbbf24; --info-color: #3b82f6; --info-light: #60a5fa; --text-dark: #1f2937; --text-medium: #4b5563; --text-light: #f9fafb; --bg-light: #f8fafc; --bg-dark: #1f2937; --border-color: #e2e8f0; --shadow-sm: 0 1px 3px rgba(0, 0, 0, 0.1), 0 1px 2px rgba(0, 0, 0, 0.06); --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06); --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05); --shadow-xl: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04); --radius-sm: 0.25rem; --radius-md: 0.375rem; --radius-lg: 0.5rem; --radius-xl: 0.75rem; --spacing-1: 0.25rem; --spacing-2: 0.5rem; --spacing-3: 0.75rem; --spacing-4: 1rem; --spacing-5: 1.25rem; --spacing-6: 1.5rem; --spacing-8: 2rem; } html, body { height: 100%; overflow: hidden; } body { font-family: "Segoe UI", system-ui, -apple-system, sans-serif; margin: 0; background: linear-gradient(135deg, var(--bg-light), #e2e8f0 70%, #f1f5f9); color: var(--text-dark); line-height: 1.6; font-size: 16px; } h1 { color: var(--primary-color); padding: var(--spacing-4) var(--spacing-6); margin: 0; background: linear-gradient(90deg, #fff, #f1f5f9); border-bottom: 1px solid var(--border-color); display: flex; align-items: center; box-shadow: var(--shadow-md); font-size: 1.75rem; font-weight: 600; letter-spacing: -0.025em; position: fixed; top: 0; left: 0; right: 0; z-index: 1000; backdrop-filter: blur(5px); background-color: rgba(255, 255, 255, 0.95); } h1 svg { width: 32px; height: 32px; margin-right: var(--spacing-3); fill: var(--primary-color); } h2 { color: var(--primary-color); border-bottom: 2px solid var(--border-color); padding-bottom: var(--spacing-3); margin-bottom: var(--spacing-4); font-size: 1.4rem; font-weight: 600; letter-spacing: -0.01em; } h3 { font-size: 1.1rem; margin: var(--spacing-4) 0 var(--spacing-2) 0; color: var(--text-dark); font-weight: 600; } .container { display: flex; height: 100vh; overflow: hidden; width: 100%; } .content { flex-grow: 1; padding: 0; max-width: 1200px; margin: 0 auto; width: 100%; display: flex; flex-direction: column; overflow-y: auto; padding-top: 60px; } .section { margin: var(--spacing-4) var(--spacing-4) var(--spacing-4) var(--spacing-4); padding: var(--spacing-5); background: #ffffff; border-radius: var(--radius-lg); box-shadow: var(--shadow-md); transition: all 0.3s ease; border: 1px solid rgba(226, 232, 240, 0.7); position: relative; overflow: visible; flex: 1; } .section h2 { display: flex; align-items: center; font-size: 1.4rem; margin-top: 0; } .section h2::before { content: ''; display: inline-block; width: 4px; height: 20px; background: var(--primary-color); margin-right: 10px; border-radius: var(--radius-sm); } .hidden { display: none !important; } input[type="text"], input[type="password"], input[type="number"] { padding: var(--spacing-3) var(--spacing-4); margin: var(--spacing-1) 0 var(--spacing-2) 0; border: 1px solid #cbd5e1; border-radius: var(--radius-md); width: 100%; box-sizing: border-box; display: inline-block; font-size: 1rem; transition: all 0.2s ease; min-height: 2.75rem; box-shadow: var(--shadow-sm); background-color: #fcfcfc; } input[type="text"]:focus, input[type="password"]:focus, input[type="number"]:focus { border-color: var(--primary-light); outline: none; box-shadow: 0 0 0 3px rgba(96, 165, 250, 0.25); background-color: #fff; } button { background: linear-gradient(90deg, var(--primary-color), var(--primary-light)); color: #fff; padding: var(--spacing-3) var(--spacing-5); margin: var(--spacing-2) 0; border: none; border-radius: var(--radius-md); cursor: pointer; transition: all 0.3s ease; box-shadow: var(--shadow-sm); font-size: 1rem; font-weight: 500; display: inline-flex; align-items: center; justify-content: center; min-height: 2.75rem; letter-spacing: 0.01em; position: relative; overflow: hidden; } button:hover { background: linear-gradient(90deg, var(--primary-dark), var(--primary-color)); box-shadow: var(--shadow-md); transform: translateY(-2px); } button:active { transform: translateY(0); box-shadow: var(--shadow-sm); } .navbar { width: 240px; min-width: 240px; background: var(--bg-dark); padding-top: var(--spacing-4); box-shadow: var(--shadow-lg); display: none; border-right: 1px solid rgba(255, 255, 255, 0.1); z-index: 10; } .navbar a { display: flex; align-items: center; color: var(--text-light); padding: var(--spacing-3) var(--spacing-4); text-decoration: none; border-left: 3px solid transparent; transition: all 0.2s ease; font-size: 1rem; margin-bottom: var(--spacing-1); } .navbar a:hover { background-color: rgba(255, 255, 255, 0.1); border-left-color: var(--primary-light); } .navbar a.active { background: linear-gradient(90deg, var(--primary-color) 80%, var(--primary-dark)); border-left-color: #fff; font-weight: 500; } .navbar a svg { width: 20px; height: 20px; margin-right: var(--spacing-3); fill: var(--text-light); } .navbar a.active svg { fill: #fff; } table { border-collapse: separate; border-spacing: 0; width: 100%; margin-top: var(--spacing-3); background: #fff; border-radius: var(--radius-md); overflow: hidden; box-shadow: var(--shadow-sm); } th, td { border: 1px solid var(--border-color); padding: var(--spacing-3) var(--spacing-4); text-align: left; } th { background: linear-gradient(90deg, #f1f5f9, #f8fafc); color: var(--text-dark); font-weight: 600; font-size: 0.95rem; } tr:nth-child(even) { background-color: #f8fafc; } tr:hover { background-color: #f1f5f9; } .led { height: 16px; width: 16px; border-radius: 50%; display: inline-block; margin-right: var(--spacing-2); vertical-align: middle; position: relative; } .led-off { background-color: var(--danger-color); box-shadow: 0 0 6px var(--danger-light); } .led-on { background-color: var(--success-color); box-shadow: 0 0 6px var(--success-light); } .switch { position: relative; display: inline-block; width: 48px; height: 24px; vertical-align: middle; } .switch input { opacity: 0; width: 0; height: 0; } .slider { position: absolute; cursor: pointer; top: 0; left: 0; right: 0; bottom: 0; background-color: #cbd5e1; transition: 0.4s; border-radius: 24px; box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.15); } .slider:before { position: absolute; content: ""; height: 18px; width: 18px; left: 3px; bottom: 3px; background-color: white; transition: 0.4s; border-radius: 50%; box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2); } input:checked+.slider { background-color: var(--success-color); } input:focus+.slider { box-shadow: 0 0 0 3px rgba(16, 185, 129, 0.2); } input:checked+.slider:before { transform: translateX(24px); } .progress-bar { background-color: #e5e7eb; border-radius: var(--radius-md); overflow: hidden; height: 18px; margin: var(--spacing-4) 0; box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.1); } .progress-fill { height: 100%; background: linear-gradient(90deg, var(--primary-color), var(--primary-light)); text-align: center; color: #fff; line-height: 18px; font-size: 12px; font-weight: 500; transition: width 0.5s ease, background-color 0.3s ease; } .input-group { margin-bottom: var(--spacing-4); } .input-group label { display: flex; align-items: center; font-weight: 500; margin-bottom: var(--spacing-2); color: var(--text-medium); } hr { border: 0; height: 1px; background: linear-gradient(to right, transparent, var(--border-color), transparent); margin: var(--spacing-6) 0; } @media (max-width: 900px) { .container { flex-direction: column; } .navbar { width: 100%; display: flex; flex-direction: row; overflow-x: auto; padding: var(--spacing-2) 0; position: sticky; top: 70px; z-index: 100; background-color: rgba(255, 255, 255, 0.95); backdrop-filter: blur(5px); box-shadow: var(--shadow-md); } .navbar a { flex: 1 1 auto; justify-content: center; padding: var(--spacing-3) var(--spacing-2); border-left: none; border-bottom: 3px solid transparent; white-space: nowrap; } .navbar a.active { border-left: none; border-bottom: 3px solid var(--primary-color); } .navbar a svg { margin-right: var(--spacing-1); } h1 { font-size: 1.5rem; padding: var(--spacing-4); } .section { padding: var(--spacing-4); margin: var(--spacing-3); } input[type="text"], input[type="password"], input[type="number"] { margin: var(--spacing-1) 0 var(--spacing-3) 0; } } @media (max-width: 480px) { h1 { font-size: 1.25rem; padding: var(--spacing-3); } .section { padding: var(--spacing-3); margin: var(--spacing-2); } .navbar a svg { margin-right: 0; } .navbar a span { display: none; } .navbar { justify-content: space-between; } } </style></head><body onload="checkLoginStatus(),fetchIOStatus(),fetchSystemInfo(),fetchModbusDevices()"><div class="container"><div class="navbar" id="mainNavbar"><a href="#" class="nav-item active" onclick="showSection('ioStatusSection', this)"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-1 15H9v-2h2v2zm0-4H9v-2h2v2zm0-4H9V7h2v2zm4 8h-2v-2h2v2zm0-4h-2v-2h2v2zm0-4h-2V7h2v2z" /></svg><span>IO Status</span></a><a href="#" class="nav-item" onclick="showSection('systemInfoSection', this)"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 17h-2v-2h2v2zm0-4h-2V7h2v8z" /></svg><span>System Info</span></a><a href="#" class="nav-item" onclick="showSection('networkConfigSection', this)"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 17c-3.87 0-7-3.13-7-7s3.13-7 7-7 7 3.13 7 7-3.13 7-7 7zm-1-8V7h2v4h-2zm-1 4h2v2h-2v-2z" /></svg><span>Network Config</span></a><a href="#" class="nav-item" onclick="showSection('alarmConfigSection', this)"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M22 12c0-5.52-4.48-10-10-10S2 6.48 2 12s4.48 10 10 10 10-4.48 10-10zm-10 8c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm-1-12h2v6h-2z" /></svg><span>Alarm Config</span></a><a href="#" class="nav-item" onclick="showSection('mqttConfigSection', this)"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M12 3L2 12h3v8h14v-8h3L12 3zM7 18v-7.81l5-4.5 5 4.5V18H7z" /></svg><span>MQTT Config</span></a><a href="#" class="nav-item" onclick="showSection('modbusTCPConfigSection', this)"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M4 6h16v2H4zm0 5h16v2H4zm0 5h16v2H4z" /></svg><span>Modbus TCP</span></a><a href="#" class="nav-item" onclick="showSection('apiConfigSection', this)"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V5h14v14zM8 7h8v2H8zm0 4h8v2H8zm0 4h5v2H8z" /></svg><span>REST API Config</span></a><a href="#" class="nav-item" onclick="showSection('firmwareUpdateSection', this)"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M19 9h-4V3H9v6H5l7 7 7-7zm-4 7c0 .55-.45 1-1 1h-4c-.55 0-1-.45-1-1v-4H9v4c0 1.1.9 2 2 2h2c1.1 0 2-.9 2-2v-4h-1v4z" /></svg><span>Firmware Update</span></a></div><div class="content"><h1 id="pageTitle"><svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-1 15H9v-2h2v2zm0-4H9v-2h2v2zm0-4H9V7h2v2zm4 8h-2v-2h2v2zm0-4h-2v-2h2v2zm0-4h-2V7h2v2z" /></svg>f-FINC Agent <button onclick="logout()" id="logoutBtn" style="margin-left: auto; padding: 5px 10px; font-size: 0.9rem; min-height: auto;" class="hidden">Đăng xuất</button></h1><div class="section" id="loginSection"><h2>Login</h2><p>Please log in to access configuration sections.</p><input type="text" id="username" placeholder="Username (admin)" /><input type="password" id="password" placeholder="Password (admin)" /><button onclick="login()">Login</button></div><div class="section hidden" id="ioStatusSection"><h2>IO Status</h2><input type="number" id="diInterval" placeholder="Update Interval (s)" /><button onclick="saveDiInterval()">Save Interval</button><h3 style="margin: 7px 0 3px 0; font-size: 0.99rem">Inputs</h3><table><thead><tr><th>Input</th><th>GPIO</th><th>Status (ON = Green, OFF = Red)</th></tr></thead><tbody id="inputTable"></tbody></table><h3 style="margin: 7px 0 3px 0; font-size: 0.99rem">Outputs</h3><table><thead><tr><th>Output</th><th>GPIO</th><th>Status</th><th>Control</th></tr></thead><tbody id="outputTable"></tbody></table></div><div class="section hidden" id="systemInfoSection"><h2>System Information</h2><p>Firmware Version: <strong id="currentVersion">Loading...</strong></p><h3 style="margin: 7px 0 3px 0; font-size: 0.99rem">Processor (CPU)</h3><p>Frequency: <strong id="cpuFreq">N/A</strong> MHz, Cores: <strong id="cpuCores">N/A</strong></p><h3 style="margin: 7px 0 3px 0; font-size: 0.99rem">Memory (RAM/Heap)</h3><p>Total RAM: <strong id="ramTotal">N/A</strong> bytes</p><div class="progress-bar"><div id="ramUsageBar" class="progress-fill" style="width: 0%"></div></div><p>Used: <span id="ramUsed">N/A</span> bytes | Free: <span id="ramFree">N/A</span> bytes</p><h3 style="margin: 7px 0 3px 0; font-size: 0.99rem">Flash Memory (OTA/Sketch)</h3><p>Total Flash Chip: <strong id="flashTotal">N/A</strong> bytes</p><div class="progress-bar"><div id="flashUsageBar" class="progress-fill" style="width: 0%; background-color: #fbbf24"></div></div><p>Sketch Used: <span id="flashUsed">N/A</span> bytes | OTA Free: <span id="flashFree">N/A</span> bytes</p></div><div class="section hidden" id="networkConfigSection"><h2>Network Configuration</h2><p> The device will create an AP if WiFi connection fails. Use <strong>FINC_ESP32_SETUP</strong> / <strong>12345678</strong> to reconfigure. </p><input type="checkbox" id="useStaticIP" /> Use Static IP<br /><input type="text" id="ipAddress" placeholder="IP Address (e.g., 192.168.1.10)" /><input type="text" id="subnetMask" placeholder="Subnet Mask (e.g., 255.255.255.0)" /><input type="text" id="gateway" placeholder="Gateway (e.g., 192.168.1.1)" /><button onclick="saveNetworkConfig()">Save Config</button></div><div class="section hidden" id="alarmConfigSection"><h2>Alarm Configuration</h2><input type="text" id="alarmCondition" placeholder="Condition (e.g., input1 > 1)" /><input type="number" id="defaultInterval" placeholder="Default Interval (s)" /><input type="number" id="alarmInterval" placeholder="Alarm Interval (s)" /><button onclick="saveAlarmConfig()">Save Config</button></div><div class="section hidden" id="mqttConfigSection"><h2>MQTT Configuration</h2><div class="input-group"><label for="mqttEnabled"><input type="checkbox" id="mqttEnabled" /> Enable </label></div><input type="text" id="mqttUrl" placeholder="MQTT Broker URL" /><input type="number" id="mqttPort" placeholder="Port" /><input type="text" id="mqttTopic" placeholder="MQTT Topic (e.g., f-finc/data/01)" /><input type="text" id="mqttUsername" placeholder="Username" /><input type="password" id="mqttPassword" placeholder="Password" /><button onclick="saveMqttConfig()">Save Config</button></div><div class="section hidden" id="modbusTCPConfigSection"><h2>Modbus TCP</h2><div class="input-group"><label for="modbusTCPEnabled"><input type="checkbox" id="modbusTCPEnabled" /> Enable </label></div><button onclick="saveModbusTCPConfig()" style="margin-top: 10px">Save Config</button><hr style="margin: 10px 0" /><h3 style="margin: 7px 0 3px 0; font-size: 0.99rem">Modbus Devices</h3><div id="modbusDevicesList"></div><div style="margin-top: 10px"><button onclick="showAddDeviceForm()">Add Device</button></div><div id="deviceForm" class="hidden" style="margin-top: 10px; padding: 10px; border: 1px solid var(--border-color); border-radius: var(--border-radius);"><h4 style="margin-top: 0">Device Configuration</h4><input type="hidden" id="deviceId" /><input type="text" id="deviceName" placeholder="Device Name" /><input type="text" id="deviceIP" placeholder="IP Address" /><input type="number" id="devicePort" placeholder="Port" /><input type="number" id="devicePollRate" placeholder="Poll Rate (ms)" /><div class="input-group"><label for="deviceEnabled"><input type="checkbox" id="deviceEnabled" /> Enable Device</label></div><div style="display: flex; justify-content: space-between"><button onclick="saveDevice()">Save Device</button><button onclick="cancelDeviceForm()">Cancel</button></div></div><hr style="margin: 10px 0" /><h3 style="margin: 7px 0 3px 0; font-size: 0.99rem">Modbus Registers</h3><div id="modbusRegistersList"></div><div id="registerForm" class="hidden" style="margin-top: 10px; padding: 10px; border: 1px solid var(--border-color); border-radius: var(--border-radius);"><h4 style="margin-top: 0">Register Configuration</h4><input type="hidden" id="registerId" /><input type="hidden" id="registerDeviceId" /><select id="registerType"><option value="coil">Coil</option><option value="discrete">Discrete Input</option><option value="holding">Holding Register</option><option value="input">Input Register</option></select><input type="number" id="registerAddress" placeholder="Register Address" /><input type="text" id="registerName" placeholder="Register Name" /><select id="registerByteOrder"><option value="ABCD">ABCD (Big Endian)</option><option value="CDAB">CDAB (Little Endian Swap)</option><option value="BADC">BADC (Big Endian Byte Swap)</option><option value="DCBA">DCBA (Little Endian)</option></select><div class="input-group"><label for="registerEnabled"><input type="checkbox" id="registerEnabled" /> Enable Register</label></div><div style="display: flex; justify-content: space-between"><button onclick="saveRegister()">Save Register</button><button onclick="cancelRegisterForm()">Cancel</button></div></div></div><div class="section hidden" id="apiConfigSection"><h2>REST API Configuration</h2><div class="input-group"><label for="apiEnabled"><input type="checkbox" id="apiEnabled" />Enable API POST</label></div><input type="text" id="apiUrl" placeholder="API Endpoint URL" /><input type="text" id="apiUsername" placeholder="Username" /><input type="password" id="apiPassword" placeholder="Password" /><button onclick="saveApiConfig()">Save Config</button><hr /><h3 style="margin: 7px 0 3px 0; font-size: 0.99rem">Test Post API Data</h3><input type="text" id="apiData" placeholder="Data to post (JSON)" style="width: calc(100% - 18px)" /><button onclick="postApiData()">Post Data</button></div><div class="section hidden" id="firmwareUpdateSection"><h2>Firmware Update</h2><p>Current Version: <strong id="currentVersionOta">Loading...</strong></p><h3 style="margin: 7px 0 3px 0; font-size: 0.99rem">Auto Update Configuration</h3><input type="number" id="firmwareInterval" placeholder="Check interval (hours). Enter 0 to disable." /><button onclick="saveFirmwareInterval()">Save Interval</button><hr style="margin: 10px 0" /><h3 style="margin: 7px 0 3px 0; font-size: 0.99rem">Manual Update</h3><p>Click the button below to check for new firmware immediately.</p><button onclick="checkFirmwareNow()">Check now</button></div></div></div><script> const configSections = [ "ioStatusSection", "systemInfoSection", "networkConfigSection", "alarmConfigSection", "mqttConfigSection", "modbusTCPConfigSection", "apiConfigSection", "firmwareUpdateSection", ]; const inputGpios = [32, 33, 34, 35, 36, 39, 14, 13]; const outputGpios = [26, 25, 27, 18, 19, 23, 4, 2]; const numInputs = 8; const numOutputs = 8; function showSection(sectionId, navItem) { configSections.forEach((id) => { document.getElementById(id).classList.add("hidden"); }); document.getElementById(sectionId).classList.remove("hidden"); document.querySelectorAll(".nav-item").forEach((item) => { item.classList.remove("active"); }); navItem.classList.add("active"); } function showConfigSections() { document.getElementById("loginSection").classList.add("hidden"); document.getElementById("mainNavbar").style.display = "block"; document.querySelector(".container").style.display = "flex"; document.getElementById("logoutBtn").classList.remove("hidden"); showSection( "ioStatusSection", document.querySelector("#mainNavbar .nav-item:first-child") ); buildIOTables(); } function checkLoginStatus() { if (localStorage.getItem('isLoggedIn') === 'true') { showConfigSections(); } } async function login() { const username = document.getElementById("username").value; const password = document.getElementById("password").value; const response = await fetch("/auth/login", { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify({ username, password }), }); if (response.ok) { const result = await response.json(); if (result.success) { localStorage.setItem('isLoggedIn', 'true'); showConfigSections(); } else { alert("Login failed. Please check your username and password."); } } else { alert("Error: Cannot connect or server error."); } } function logout() { localStorage.removeItem('isLoggedIn'); document.getElementById("loginSection").classList.remove("hidden"); document.getElementById("mainNavbar").style.display = "none"; document.getElementById("logoutBtn").classList.add("hidden"); document.querySelectorAll(".section:not(#loginSection)").forEach(section => { section.classList.add("hidden"); }); } async function saveDiInterval() { alert("Digital Inputs interval saved."); } function buildIOTables() { const inputTable = document.getElementById("inputTable"); const outputTable = document.getElementById("outputTable"); let inputHtml = ""; let outputHtml = ""; for (let i = 0; i < numInputs; i++) { inputHtml += `<tr><td>Input ${i + 1}</td><td>GPIO ${inputGpios[i] }</td><td><span id="input${i + 1 }Led" class="led led-off"></span><span id="input${i + 1 }State">OFF</span></td></tr>`; } for (let i = 0; i < numOutputs; i++) { outputHtml += `<tr><td>Output ${i + 1}</td><td>GPIO ${outputGpios[i] }</td><td><span id="output${i + 1 }Led" class="led led-off"></span><span id="output${i + 1 }State">OFF</span></td><td><label class="switch"><input type="checkbox" id="output${i + 1 }Switch" onchange="toggleOutput(${i + 1 }, this.checked)"><span class="slider"></span></label></td></tr>`; } inputTable.innerHTML = inputHtml; outputTable.innerHTML = outputHtml; } async function toggleOutput(id, state) { const ledElement = document.getElementById(`output${id}Led`); const stateElement = document.getElementById(`output${id}State`); try { ledElement.classList.remove("led-off", "led-on"); ledElement.classList.add("led-off"); stateElement.innerText = "..."; const response = await fetch("/control/output", { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify({ id, state }), }); if (response.ok) { const result = await response.json(); if (result.success) { updateOutputDisplay(id, result.state); } else { alert("Output control error: Server error"); document.getElementById(`output${id}Switch`).checked = !state; } } else { throw new Error("Server error"); } } catch (error) { alert(`Error: Cannot control Output ${id}`); document.getElementById(`output${id}Switch`).checked = !state; } } function updateOutputDisplay(id, state) { const led = document.getElementById(`output${id}Led`); const stateText = document.getElementById(`output${id}State`); led.classList.remove("led-off", "led-on"); led.classList.add(state ? "led-on" : "led-off"); stateText.innerText = state ? "ON" : "OFF"; document.getElementById(`output${id}Switch`).checked = state; } async function fetchIOStatus() { const response = await fetch("/io-status"); if (response.ok) { const data = await response.json(); data.inputs.forEach((input) => { const led = document.getElementById(`input${input.id}Led`); const stateText = document.getElementById(`input${input.id}State`); if (led && stateText) { led.classList.remove("led-off", "led-on"); led.classList.add(input.state ? "led-on" : "led-off"); stateText.innerText = input.state ? "ON" : "OFF"; } }); data.outputs.forEach((output) => { updateOutputDisplay(output.id, output.state); }); } setTimeout(fetchIOStatus, 3000); } function formatBytes(bytes, decimals = 2) { if (bytes === 0) return "0 Bytes"; const k = 1024; const dm = decimals < 0 ? 0 : decimals; const sizes = ["Bytes", "KB", "MB", "GB", "TB"]; const i = Math.floor(Math.log(bytes) / Math.log(k)); return ( parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + " " + sizes[i] ); } function updateProgressBar(elementId, value, total, color = "#2563eb") { const bar = document.getElementById(elementId); const percent = Math.round((value / total) * 100); bar.style.width = `${percent}%`; bar.innerText = `${percent}%`; bar.style.backgroundColor = color; } async function fetchSystemInfo() { const response = await fetch("/system-info"); if (response.ok) { const data = await response.json(); document.getElementById("currentVersion").innerText = data.firmware_version.toFixed(2); document.getElementById("currentVersionOta").innerText = data.firmware_version.toFixed(2); const ramUsed = data.ram_total - data.ram_free; document.getElementById("cpuFreq").innerText = data.cpu_freq; document.getElementById("cpuCores").innerText = data.cpu_cores; document.getElementById("ramTotal").innerText = formatBytes( data.ram_total ); document.getElementById("ramUsed").innerText = formatBytes(ramUsed); document.getElementById("ramFree").innerText = formatBytes( data.ram_free ); updateProgressBar("ramUsageBar", ramUsed, data.ram_total, "#22c55e"); document.getElementById("flashTotal").innerText = formatBytes( data.flash_total ); document.getElementById("flashUsed").innerText = formatBytes( data.flash_used ); document.getElementById("flashFree").innerText = formatBytes( data.flash_free_update ); updateProgressBar( "flashUsageBar", data.flash_used, data.flash_total, "#fbbf24" ); } setTimeout(fetchSystemInfo, 10000); } async function saveNetworkConfig() { const staticIp = document.getElementById("useStaticIP").checked; const ipAddress = document.getElementById("ipAddress").value; const subnetMask = document.getElementById("subnetMask").value; const gateway = document.getElementById("gateway").value; const response = await fetch("/config/network", { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify({ staticIp, ipAddress, subnetMask, gateway }), }); const result = await response.json(); alert( "Network config " + (result.success ? "saved. Device will restart." : "failed") ); } async function saveAlarmConfig() { const condition = document.getElementById("alarmCondition").value; const defaultInterval = document.getElementById("defaultInterval").value; const alarmInterval = document.getElementById("alarmInterval").value; const response = await fetch("/config/alarm", { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify({ condition, defaultInterval: parseInt(defaultInterval), alarmInterval: parseInt(alarmInterval), }), }); const result = await response.json(); alert("Alarm config " + (result.success ? "saved" : "failed")); } async function saveMqttConfig() { const enabled = document.getElementById("mqttEnabled").checked; const url = document.getElementById("mqttUrl").value; const port = document.getElementById("mqttPort").value; const topic = document.getElementById("mqttTopic").value; const username = document.getElementById("mqttUsername").value; const password = document.getElementById("mqttPassword").value; const response = await fetch("/config/mqtt", { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify({ enabled, url, port: parseInt(port), topic, username, password, }), }); const result = await response.json(); alert("MQTT config " + (result.success ? "saved" : "failed")); } async function saveApiConfig() { const enabled = document.getElementById("apiEnabled").checked; const url = document.getElementById("apiUrl").value; const username = document.getElementById("apiUsername").value; const password = document.getElementById("apiPassword").value; const response = await fetch("/config/api", { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify({ enabled, url, username, password }), }); const result = await response.json(); alert("API config " + (result.success ? "saved" : "failed")); } async function postApiData() { const data = document.getElementById("apiData").value; const response = await fetch("/api/post", { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify({ data: data }), }); const result = await response.json(); alert("Post API " + (result.success ? "success" : "failed")); } async function saveFirmwareInterval() { const interval = document.getElementById("firmwareInterval").value; const response = await fetch("/firmware/update", { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify({ interval: parseInt(interval) }), }); const result = await response.json(); alert( "Firmware config: " + (result.success ? "Interval saved" : "Failed") ); } async function checkFirmwareNow() { if ( confirm( "Are you sure you want to check and update firmware now? Device may restart if new version is found." ) ) { alert( "Request sent. Please check device Serial console for progress." ); const response = await fetch("/firmware/check-now"); const result = await response.json(); if (!result.success) { alert("Request failed."); } } } let modbusDevices = []; let modbusRegisters = []; let editingDeviceId = null; let editingRegisterId = null; async function saveModbusTCPConfig() { const enabled = document.getElementById("modbusTCPEnabled").checked; try { const response = await fetch("/modbus-tcp/config", { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify({ enabled }), }); if (response.ok) { const result = await response.json(); if (result.success) { alert("Modbus TCP configuration saved successfully"); } else { alert( "Failed to save Modbus TCP configuration: " + (result.message || "Unknown error") ); } } else { alert("Server error while saving Modbus TCP configuration"); } } catch (error) { alert("Error: " + error.message); } } async function fetchModbusDevices() { const response = await fetch("/modbus-tcp/devices"); if (response.ok) { const data = await response.json(); modbusDevices = data.devices || []; modbusRegisters = data.registers || []; renderModbusDevices(); renderModbusRegisters(); } } function renderModbusDevices() { const devicesList = document.getElementById("modbusDevicesList"); if (!devicesList) return; let html = "<table><thead><tr><th>Name</th><th>IP Address</th><th>Port</th><th>Poll Rate</th><th>Status</th><th>Actions</th></tr></thead><tbody>"; if (modbusDevices.length === 0) { html += '<tr><td colspan="6" style="text-align: center;">No devices configured</td></tr>'; } else { modbusDevices.forEach((device) => { html += `<tr><td>${device.name}</td><td>${device.ip}</td><td>${device.port}</td><td>${device.pollInterval} ms</td><td>${device.enabled ? '<span class="led led-on"></span> Enabled' : '<span class="led led-off"></span> Disabled' }</td><td><button onclick="editDevice('${device.id}')">Edit</button><button onclick="deleteDevice('${device.id}')">Delete</button><button onclick="showAddRegisterForm('${device.id }')">Add Register</button></td></tr>`; }); } html += "</tbody></table>"; devicesList.innerHTML = html; } function renderModbusRegisters() { const registersList = document.getElementById("modbusRegistersList"); if (!registersList) return; let html = "<table><thead><tr><th>Device</th><th>Name</th><th>Type</th><th>Address</th><th>Byte Order</th><th>Value</th><th>Status</th><th>Actions</th></tr></thead><tbody>"; if (modbusRegisters.length === 0) { html += '<tr><td colspan="8" style="text-align: center;">No registers configured</td></tr>'; } else { modbusRegisters.forEach((register) => { const device = modbusDevices.find( (d) => d.id === register.deviceId ) || { name: "Unknown" }; html += `<tr><td>${device.name}</td><td>${register.name}</td><td>${register.type}</td><td>${register.address}</td><td>${register.byteOrder}</td><td>${register.value !== undefined ? register.value : "N/A"}</td><td>${register.enabled ? '<span class="led led-on"></span> Enabled' : '<span class="led led-off"></span> Disabled' }</td><td><button onclick="editRegister('${register.id}')">Edit</button><button onclick="deleteRegister('${register.id}')">Delete</button></td></tr>`; }); } html += "</tbody></table>"; registersList.innerHTML = html; } function showAddDeviceForm() { editingDeviceId = null; document.getElementById("deviceId").value = ""; document.getElementById("deviceName").value = ""; document.getElementById("deviceIP").value = ""; document.getElementById("devicePort").value = "502"; document.getElementById("devicePollRate").value = "1000"; document.getElementById("deviceEnabled").checked = true; document.getElementById("deviceForm").classList.remove("hidden"); } function editDevice(deviceId) { const device = modbusDevices.find((d) => d.id === deviceId); if (!device) return; editingDeviceId = deviceId; document.getElementById("deviceId").value = deviceId; document.getElementById("deviceName").value = device.name; document.getElementById("deviceIP").value = device.ip; document.getElementById("devicePort").value = device.port; document.getElementById("devicePollRate").value = device.pollInterval; document.getElementById("deviceEnabled").checked = device.enabled; document.getElementById("deviceForm").classList.remove("hidden"); } function cancelDeviceForm() { document.getElementById("deviceForm").classList.add("hidden"); } async function saveDevice() { const deviceId = document.getElementById("deviceId").value; const name = document.getElementById("deviceName").value; const ip = document.getElementById("deviceIP").value; const port = parseInt(document.getElementById("devicePort").value); const pollInterval = parseInt( document.getElementById("devicePollRate").value ); const enabled = document.getElementById("deviceEnabled").checked; if (!name || !ip || isNaN(port) || isNaN(pollInterval)) { alert("Please fill all required fields with valid values"); return; } const deviceData = { name, ip, port, pollInterval, enabled, }; let url = "/modbus-tcp/device/create"; let method = "POST"; if (editingDeviceId) { url = "/modbus-tcp/device/update"; method = "POST"; deviceData.id = editingDeviceId; } try { const response = await fetch(url, { method, headers: { "Content-Type": "application/json" }, body: JSON.stringify(deviceData), }); if (response.ok) { const result = await response.json(); if (result.success) { alert("Device saved successfully"); document.getElementById("deviceForm").classList.add("hidden"); fetchModbusDevices(); } else { alert( "Failed to save device: " + (result.message || "Unknown error") ); } } else { alert("Server error while saving device"); } } catch (error) { alert("Error: " + error.message); } } async function deleteDevice(deviceId) { if ( !confirm( "Are you sure you want to delete this device? All associated registers will also be deleted." ) ) { return; } try { const response = await fetch("/modbus-tcp/device/delete", { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify({ id: deviceId }), }); if (response.ok) { const result = await response.json(); if (result.success) { alert("Device deleted successfully"); fetchModbusDevices(); } else { alert( "Failed to delete device: " + (result.message || "Unknown error") ); } } else { alert("Server error while deleting device"); } } catch (error) { alert("Error: " + error.message); } } function showAddRegisterForm(deviceId) { editingRegisterId = null; document.getElementById("registerId").value = ""; document.getElementById("registerDeviceId").value = deviceId; document.getElementById("registerType").value = "holding"; document.getElementById("registerAddress").value = ""; document.getElementById("registerName").value = ""; document.getElementById("registerByteOrder").value = "ABCD"; document.getElementById("registerEnabled").checked = true; document.getElementById("registerForm").classList.remove("hidden"); } function editRegister(registerId) { const register = modbusRegisters.find((r) => r.id === registerId); if (!register) return; editingRegisterId = registerId; document.getElementById("registerId").value = registerId; document.getElementById("registerDeviceId").value = register.deviceId; document.getElementById("registerType").value = register.type; document.getElementById("registerAddress").value = register.address; document.getElementById("registerName").value = register.name; document.getElementById("registerByteOrder").value = register.byteOrder; document.getElementById("registerEnabled").checked = register.enabled; document.getElementById("registerForm").classList.remove("hidden"); } function cancelRegisterForm() { document.getElementById("registerForm").classList.add("hidden"); } async function saveRegister() { const registerId = document.getElementById("registerId").value; const deviceId = document.getElementById("registerDeviceId").value; const type = document.getElementById("registerType").value; const address = parseInt( document.getElementById("registerAddress").value ); const name = document.getElementById("registerName").value; const byteOrder = document.getElementById("registerByteOrder").value; const enabled = document.getElementById("registerEnabled").checked; if (!deviceId || !name || isNaN(address)) { alert("Please fill all required fields with valid values"); return; } const registerData = { deviceId, type, address, name, byteOrder, enabled, }; let url = "/modbus-tcp/register/create"; let method = "POST"; if (editingRegisterId) { url = "/modbus-tcp/register/update"; method = "POST"; registerData.id = editingRegisterId; } try { const response = await fetch(url, { method, headers: { "Content-Type": "application/json" }, body: JSON.stringify(registerData), }); if (response.ok) { const result = await response.json(); if (result.success) { alert("Register saved successfully"); document.getElementById("registerForm").classList.add("hidden"); fetchModbusDevices(); } else { alert( "Failed to save register: " + (result.message || "Unknown error") ); } } else { alert("Server error while saving register"); } } catch (error) { alert("Error: " + error.message); } } async function deleteRegister(registerId) { if (!confirm("Are you sure you want to delete this register?")) { return; } try { const response = await fetch("/modbus-tcp/register/delete", { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify({ id: registerId }), }); if (response.ok) { const result = await response.json(); if (result.success) { alert("Register deleted successfully"); fetchModbusDevices(); } else { alert( "Failed to delete register: " + (result.message || "Unknown error") ); } } else { alert("Server error while deleting register"); } } catch (error) { alert("Error: " + error.message); } } </script></body></html>)rawliteral";